############################################################

 SERVER CONFIGURATION

############################################################

#############################
# BASIC SETTING 

# password 생성 
- root
$ sudo passwd 
- rocky
$ sudo passwd rocky

# make directory 
$ sudo mkdir -p /workspace/app 
$ sudo mkdir -p /workspace/devwork 
$ sudo mkdir -p /workspace/doc 
$ sudo mkdir -p /workspace/storge 
$ sudo mkdir -p /workspace/temp 

-- root -> rocky
$ sudo chown -R  rocky:rocky /workspace 

# .bashrc alias 
$ vi ~/.bashrc
  # Add Config 
  alias cls=clear
  alias python=python3
  alias pip=pip3

  $ source .bashrc

# TimeZone Change
$ sudo ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime

* root , user
  $ vi ~/.bashrc
  TZ='Asia/Seoul'; export TZ 
  $ source .bashrc

# Vim set number
  $ vi ~/.vimrc
  set number 
  
#############################
# INSTALL PROGRAM

$ sudo yum upgrade

- java
$ sudo yum install openjdk-11-jdk-headless

- nvm 
$ sudo curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash

vi ~/.bashrc
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm

source ~/.bashrc

$ nvm ls

- nodejs & npm 
$ nvm install --lts

$ nvm alias default lts/gallium

$ nvm use lts/gallium

  (nvm 설치로 아래 내용 대체)
  - nodejs
  #sudo yum install nodejs
  - npm 
  #sudo yum install npm

- yarn
$ npm install --global yarn

- go
$ wget https://golang.org/dl/go1.16.2.linux-amd64.tar.gz
$ sudo tar -C /usr/local -xzf go1.16.2.linux-amd64.tar.gz

  vi ~/.bashrc
  export PATH=$PATH:/usr/local/go/bin
  export GOPATH=/workspace/program/go

source ~/.bashrc

- docker
# yum-utiles 패키지 설치
sudo yum -y update
sudo yum install -y yum-utils

# repository 설정
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

# 최신 버전의 Docker Engine 설치
# sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    # 특정 버전의 Docker Engine 설치
    # 설치 가능한 버전 목록 확인 (현재 최신 버전 23.0.1)
    # yum list docker-ce --showduplicates | sort -r
    version='23.0.1'
    sudo yum install -y docker-ce-${version} docker-ce-cli-${version} containerd.io docker-buildx-plugin docker-compose-plugin


# docker 그룹 생성 (Docker 설치 시 자동으로 생성되어있을 수 있음)
sudo groupadd docker

# docker 그룹에 사용자 추가
sudo usermod -aG docker $USER

# 그룹 변경 사항 활성화
newgrp docker

# systemctl 명령어를 사용하여 부팅 시 docker가 자동으로 실행되도록 설정 가능
sudo systemctl enable docker.service
sudo systemctl enable containerd.service

# 자동 실행 설정을 해제하려면 disable 명령어 사용
sudo systemctl disable docker.service
sudo systemctl disable containerd.service


- git 
$ sudo yum install git-core

  * git setting 
  $ sudo git config --global user.name "계정"
  $ sudo git config --global user.email "메일 주소"

  $ sudo git config --global user.name "devsunset"
  $ sudo git config --global user.email "devsunset@gmail.com"
  $ sudo git config --global color.ui"auto"

  $ vi ~/.gitconfig
  [credential]
  helper = store
  [user]
    name = devsunset
    email = devsunset@gmail.com

  $ vi ~/.git-credentials 
  https://devsunset:git_token_v@github.com

  # skip 
      - python (pip3 venv)
      $ sudo yum install python3-pip
      $ sudo yum install python3-venv

      - cockpit (https://cockpit-project.org/)
      $ sudo yum install -t ${VERSION_CODENAME}-backports cockpit
        VERSION_CODENAME값은 /etc/os-release 파일에서 확인 `

#############################
# DOCKER SETTING

------------------------------------------------------------
# docker app install 

  * docker vim install
    docker exec -it container_name /bin/bash
    apt update
    apt install vim

* apache
  $ docker run -d -p 80:80 -v /workspace/app/apache/htdocs:/usr/local/apache2/htdocs --name=apache httpd

* nginx
  $ docker run -d -p 80:80 -v /workspace/app/nginx/conf:/etc/nginx/conf.d:ro -v /workspace/app/nginx/www:/usr/share/nginx/html --name nginx  nginx

docker pull mariadb:10.4

* mariadb
  $ docker run --restart=always --name mariadb -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=PASSWORD -v /workspace/app/mariadb:/var/lib/mysql/ mariadb:10.4
    * mariadb docker shell 접속
    $ docker exec -it mariadb /bin/bash
    # mysql -u root -p
    select now();
    set global time_zone = 'Asia/Seoul';
    set time_zone = 'Asia/Seoul';
    select now();

* postgres
  $ docker run -d -p 5432:5432 --name postgres -e POSTGRES_PASSWORD=PASSWORD -v /workspace/app/postgres/pgdata:/var/lib/postgresql/data postgres
    * postgres docker shll 접속 
    $ docker exec -it postgres /bin/bash

    * psql 명령 실행 
    psql --username=postgres --dbname=postgres

    CREATE ROLE sample LOGIN CREATEDB PASSWORD 'PASSWORD';
    \du

    CREATE DATABASE sample OWNER sample;
    \l

* mongo
  $ docker run -d -p 27017:27017 --name mongo -v /workspace/app/mongo/db:/data/db  mongo --auth
  
  $ docker exec -it mongo /bin/bash
	
	mongosh

	use admin

	db.createUser(
	 {
	 user: "devsunset",
	 pwd: "PASSWORD",
	 roles: [ { role: "root", db: "admin" } ]
	 })

  db.createUser(
	 {
	 user: "devsunset",
	 pwd: "gotogether12#",
	 roles: [ { role: "root", db: "admin" } ]
	 })

* redis
  $ docker run -d -p 6379:6379 --name redis -v /workspace/app/redis/data:/data redis --appendonly yes


# skip 
      #* tomcat
      #$ docker run -d -p 8080:8080 --name tomcat tomcat 
      
      #* jenkins
      #$ docker run -u 0 -d -p 8181:8080 --name jenkins -v /workspace/app/jenkins:/var/jenkins_home -e JAVA_OPTS='-Duser.timezone=Asia/Seoul #-Dfile.encoding=UTF-8 -Dsun.jnu.encoding=UTF-8' jenkins/jenkins:lts

      #* sonarqube (not use - reson : memory 2G)
      #$ docker run -d -p 9000:9000 -p 9032:9032 --name sonarqube sonarqube

------------------------------------------------------------
# firewall 

* oracle cloud - firewall port setting 

$ sudo iptables -A INPUT  -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT
$ sudo iptables -A INPUT  -i eth0 -p tcp --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT
$ sudo iptables -A INPUT  -i eth0 -p tcp --dport 3306 -m state --state NEW,ESTABLISHED -j ACCEPT
$ sudo iptables -A INPUT  -i eth0 -p tcp --dport 4000 -m state --state NEW,ESTABLISHED -j ACCEPT
$ sudo iptables -A INPUT  -i eth0 -p tcp --dport 6739 -m state --state NEW,ESTABLISHED -j ACCEPT
$ sudo iptables -A INPUT  -i eth0 -p tcp --dport 8080 -m state --state NEW,ESTABLISHED -j ACCEPT
$ sudo iptables -A INPUT  -i eth0 -p tcp --dport 8181 -m state --state NEW,ESTABLISHED -j ACCEPT
$ sudo iptables -A INPUT  -i eth0 -p tcp --dport 8282 -m state --state NEW,ESTABLISHED -j ACCEPT
$ sudo iptables -A INPUT  -i eth0 -p tcp --dport 8383 -m state --state NEW,ESTABLISHED -j ACCEPT
$ sudo iptables -A INPUT  -i eth0 -p tcp --dport 9090 -m state --state NEW,ESTABLISHED -j ACCEPT
$ sudo iptables -A INPUT  -i eth0 -p tcp --dport 5432 -m state --state NEW,ESTABLISHED -j ACCEPT
$ sudo iptables -A INPUT  -i eth0 -p tcp --dport 27017 -m state --state NEW,ESTABLISHED -j ACCEPT

$ sudo iptables --list

* 재부팅 후에도 방화벽 정책 유지 
  ① 패키지 설치: 
  $ sudo yum install iptables-services
  ② 방화벽 정책을 저장: 
  $ sudo  iptables-save
